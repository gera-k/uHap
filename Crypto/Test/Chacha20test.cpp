/*
	Copyright(c) 2020 Gera Kazakov
	SPDX-License-Identifier: Apache-2.0
*/

#define HAP_LOG_DECLARE hapCryptoTest
#include "Platform.h"

#include "Crypto/Test/CryptoTest.h"

namespace CryptoTest
{
#if 0
	static int test_qrnd()
	{
		int r = 0;

		uint32_t d[4] = { 0x11111111, 0x01020304, 0x9b8d6f43, 0x01234567 };
		uint32_t v[4] = { 0xea2a92f4, 0xcb1cf8ce, 0x4581472e, 0x5881c4bb };

		qrnd(d[0], d[1], d[2], d[3]);

		for (int i = 0; i < 4; i++)
		{
			if (d[i] != v[i])
			{
				r++;
			}
		}

		return r;
	}

	static int test_block()
	{
		int r = 0;

		const uint8_t key[KEY_SIZE_BYTES] =
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
		};
		uint32_t count = 1;
		const uint8_t nonce[NONCE_SIZE_BYTES] =
		{
			0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00
		};
		uint8_t out[BLK_SIZE_BYTES];

		const uint8_t v[BLK_SIZE_BYTES] =
		{
			0x10, 0xf1, 0xe7, 0xe4, 0xd1, 0x3b, 0x59, 0x15, 0x50, 0x0f, 0xdd, 0x1f, 0xa3, 0x20, 0x71, 0xc4,
			0xc7, 0xd1, 0xf4, 0xc7, 0x33, 0xc0, 0x68, 0x03, 0x04, 0x22, 0xaa, 0x9a, 0xc3, 0xd4, 0x6c, 0x4e,
			0xd2, 0x82, 0x64, 0x46, 0x07, 0x9f, 0xaa, 0x09, 0x14, 0xc2, 0xd7, 0x05, 0xd9, 0x8b, 0x02, 0xa2,
			0xb5, 0x12, 0x9c, 0xd1, 0xde, 0x16, 0x4e, 0xb9, 0xcb, 0xd0, 0x83, 0xe8, 0xa2, 0x50, 0x3c, 0x4e
		};

		Crypto::Chacha20 cha;
		cha.block(key, count, nonce, out);

		if (memcmp(out, v, BLK_SIZE_BYTES) != 0)
			r++;

		return r;
	}
#endif

	static int test_encrypt()
	{
		int r = 0;

		const uint8_t key[Crypto::Chacha20::KEY_SIZE_BYTES] =
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
		};
		uint32_t count = 1;
		const uint8_t nonce[Crypto::Chacha20::NONCE_SIZE_BYTES] =
		{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x00
		};

		const char m[] = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.";
		uint8_t v[] =
		{
			0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
			0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
			0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
			0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
			0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
			0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
			0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
			0x87, 0x4d
		};
		uint8_t o[sizeof(m)];

		// encrypt m->o
		Crypto::Chacha20 cha(key, count, nonce, (const uint8_t*)m, sizeof(m) - 1, o);
		if (memcmp(o, v, sizeof(m) - 1) != 0)
			r++;

		// decrypt o->v
		count = 1;
		cha.encrypt(key, count, nonce, o, sizeof(o) - 1, v);

		if (memcmp(m, v, sizeof(m) - 1) != 0)
			r++;

		return r;
	}

	int chacha20_test()
	{
		int r = 0;

		HAP_PRINTF("Chacha20 test");

		//r += test_qrnd();

		//r += test_block();

		r += test_encrypt();

		return r;
	}

}